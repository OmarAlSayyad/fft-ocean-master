{"mappings":"ACKA,MAAM,SAAS,CAAC,UAAa,CAAG,CAC/B,SAAU,MAAM,WAAW,CAAE,QAAY,CAEzC,aAAc,CACb,yBAEA,+BACA,oCAEA,+BAEA,MAAM,WAAW,CAAE,uBAA2B,CAC9C,MAAM,WAAW,CAAE,oBAAwB,CAE3C,qBACC,MAAM,WAAW,CAAE,kBAAsB,CAEzC,iDAEA,MAAM,WAAW,CAAE,eAAmB,CAEtC,8CACA,gEAEA,uEACD,IACA,CAAC,IAAI,CAAC,MAEP,wBAAyB,CACxB,yBAEA,+BACA,oCAEA,+BAEA,MAAM,WAAW,CAAE,uBAA2B,CAC9C,MAAM,WAAW,CAAE,oBAAwB,CAE3C,qBACC,MAAM,WAAW,CAAE,kBAAsB,CAEzC,iDACA,mEAEA,0EACD,IACA,CAAC,IAAI,CAAC,MAEP,eAAgB,CACf,+BACA,oCAEA,kCACA,iCACA,6BACA,+BACA,4BAEA,0CACC,uCACD,IAEA,MAAM,WAAW,CAAC,yBAA4B,CAE9C,qBACC,yEACA,0DAGA,qEACA,mFAGA,4DACA,kGAGA,yGACA,kCACA,6CAEA,qFACA,8BAGA,yDAGA,8CACA,sDAGA,kGACA,oCAEA,qCACD,IACA,CAAC,IAAI,CAAC,KACR","sources":["<anon>","js/shaders/OceanShader.js"],"sourcesContent":["/**\n * @author jbouny / https://github.com/fft-ocean\n */ THREE.ShaderLib[\"ocean_main\"] = {\n    uniforms: THREE.UniformsLib[\"oceanfft\"],\n    vertexShader: [\n        \"precision highp float;\",\n        \"varying vec3 vWorldPosition;\",\n        \"varying vec4 vReflectCoordinates;\",\n        \"uniform mat4 u_mirrorMatrix;\",\n        THREE.ShaderChunk[\"screenplane_pars_vertex\"],\n        THREE.ShaderChunk[\"oceanfft_pars_vertex\"],\n        \"void main (void) {\",\n        THREE.ShaderChunk[\"screenplane_vertex\"],\n        \"vec4 worldPosition = screenPlaneWorldPosition;\",\n        THREE.ShaderChunk[\"oceanfft_vertex\"],\n        \"vWorldPosition = oceanfftWorldPosition.xyz;\",\n        \"vReflectCoordinates = u_mirrorMatrix * oceanfftWorldPosition;\",\n        \"gl_Position = projectionMatrix * viewMatrix * oceanfftWorldPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n    vertexShaderNoTexLookup: [\n        \"precision highp float;\",\n        \"varying vec3 vWorldPosition;\",\n        \"varying vec4 vReflectCoordinates;\",\n        \"uniform mat4 u_mirrorMatrix;\",\n        THREE.ShaderChunk[\"screenplane_pars_vertex\"],\n        THREE.ShaderChunk[\"oceanfft_pars_vertex\"],\n        \"void main (void) {\",\n        THREE.ShaderChunk[\"screenplane_vertex\"],\n        \"vWorldPosition = screenPlaneWorldPosition.xyz;\",\n        \"vReflectCoordinates = u_mirrorMatrix * screenPlaneWorldPosition;\",\n        \"gl_Position = projectionMatrix * viewMatrix * screenPlaneWorldPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n    fragmentShader: [\n        \"varying vec3 vWorldPosition;\",\n        \"varying vec4 vReflectCoordinates;\",\n        \"uniform sampler2D u_reflection;\",\n        \"uniform sampler2D u_normalMap;\",\n        \"uniform vec3 u_oceanColor;\",\n        \"uniform vec3 u_sunDirection;\",\n        \"uniform float u_exposure;\",\n        \"vec3 hdr (vec3 color, float exposure) {\",\n        \"return 1.0 - exp(-color * exposure);\",\n        \"}\",\n        THREE.ShaderChunk[\"screenplane_pars_fragment\"],\n        \"void main (void) {\",\n        \"vec3 normal = texture2D( u_normalMap, vWorldPosition.xz * 0.002 ).rgb;\",\n        \"vec3 view = normalize( vCamPosition - vWorldPosition );\",\n        // Compute the specular factor\n        \"vec3 reflection = normalize( reflect( -u_sunDirection, normal ) );\",\n        \"float specularFactor = pow( max( 0.0, dot( view, reflection ) ), 500.0 ) * 20.0;\",\n        // Get reflection color\n        \"vec3 distortion = 200.0 * normal * vec3( 1.0, 0.0, 0.1 );\",\n        \"vec3 reflectionColor = texture2DProj( u_reflection, vReflectCoordinates.xyz + distortion ).xyz;\",\n        // Smooth the normal following the distance\n        \"float distanceRatio = min( 1.0, log( 1.0 / length( vCamPosition - vWorldPosition ) * 3000.0 + 1.0 ) );\",\n        \"distanceRatio *= distanceRatio;\",\n        \"distanceRatio = distanceRatio * 0.7 + 0.3;\",\n        //'distanceRatio = 1.0;',\n        \"normal = ( distanceRatio * normal + vec3( 0.0, 1.0 - distanceRatio, 0.0 ) ) * 0.5;\",\n        \"normal /= length( normal );\",\n        // Compute the fresnel ratio\n        \"float fresnel = pow( 1.0 - dot( normal, view ), 2.0 );\",\n        // Compute the sky reflection and the water color\n        \"float skyFactor = ( fresnel + 0.2 ) * 10.0;\",\n        \"vec3 waterColor = ( 1.0 - fresnel ) * u_oceanColor;\",\n        // Compute the final color\n        \"vec3 color = ( skyFactor + specularFactor + waterColor ) * reflectionColor + waterColor * 0.5 ;\",\n        \"color = hdr( color, u_exposure );\",\n        \"gl_FragColor = vec4( color, 1.0 );\",\n        \"}\"\n    ].join(\"\\n\")\n};\n\n//# sourceMappingURL=index.09986741.js.map\n","ï»¿/**\n * @author jbouny / https://github.com/fft-ocean\n */\n \n \nTHREE.ShaderLib['ocean_main'] = {\n\tuniforms: THREE.UniformsLib[ \"oceanfft\" ],\n  \n\tvertexShader: [\n\t\t'precision highp float;',\n\t\t\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec4 vReflectCoordinates;',\n\n\t\t'uniform mat4 u_mirrorMatrix;',\n\t\t\n\t\tTHREE.ShaderChunk[ \"screenplane_pars_vertex\" ],\n\t\tTHREE.ShaderChunk[ \"oceanfft_pars_vertex\" ],\n\n\t\t'void main (void) {',\n\t\t\tTHREE.ShaderChunk[ \"screenplane_vertex\" ],\n\t\t\t\n\t\t\t'vec4 worldPosition = screenPlaneWorldPosition;',\n\t\t\t\n\t\t\tTHREE.ShaderChunk[ \"oceanfft_vertex\" ],\n\t\t\t\n\t\t\t'vWorldPosition = oceanfftWorldPosition.xyz;',\n\t\t\t'vReflectCoordinates = u_mirrorMatrix * oceanfftWorldPosition;',\n\t\t\t\n\t\t\t'gl_Position = projectionMatrix * viewMatrix * oceanfftWorldPosition;',\n\t\t'}'\n\t].join('\\n'),\n  \n\tvertexShaderNoTexLookup: [\n\t\t'precision highp float;',\n\t\t\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec4 vReflectCoordinates;',\n\n\t\t'uniform mat4 u_mirrorMatrix;',\n\t\t\n\t\tTHREE.ShaderChunk[ \"screenplane_pars_vertex\" ],\n\t\tTHREE.ShaderChunk[ \"oceanfft_pars_vertex\" ],\n\n\t\t'void main (void) {',\n\t\t\tTHREE.ShaderChunk[ \"screenplane_vertex\" ],\n\t\t\t\n\t\t\t'vWorldPosition = screenPlaneWorldPosition.xyz;',\n\t\t\t'vReflectCoordinates = u_mirrorMatrix * screenPlaneWorldPosition;',\n\t\t\t\n\t\t\t'gl_Position = projectionMatrix * viewMatrix * screenPlaneWorldPosition;',\n\t\t'}'\n\t].join('\\n'),\n  \n\tfragmentShader: [\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec4 vReflectCoordinates;',\n\n\t\t'uniform sampler2D u_reflection;',\n\t\t'uniform sampler2D u_normalMap;',\n\t\t'uniform vec3 u_oceanColor;',\n\t\t'uniform vec3 u_sunDirection;',\n\t\t'uniform float u_exposure;',\n\n\t\t'vec3 hdr (vec3 color, float exposure) {',\n\t\t\t'return 1.0 - exp(-color * exposure);',\n\t\t'}',\n\t\t\n\t\tTHREE.ShaderChunk[\"screenplane_pars_fragment\"],\n\n\t\t'void main (void) {',\n\t\t\t'vec3 normal = texture2D( u_normalMap, vWorldPosition.xz * 0.002 ).rgb;',\n\t\t\t'vec3 view = normalize( vCamPosition - vWorldPosition );',\n\t\t\t\n\t\t\t// Compute the specular factor\n\t\t\t'vec3 reflection = normalize( reflect( -u_sunDirection, normal ) );',\n\t\t\t'float specularFactor = pow( max( 0.0, dot( view, reflection ) ), 500.0 ) * 20.0;',\n\t\t\n\t\t\t// Get reflection color\n\t\t\t'vec3 distortion = 200.0 * normal * vec3( 1.0, 0.0, 0.1 );',\t\n\t\t\t'vec3 reflectionColor = texture2DProj( u_reflection, vReflectCoordinates.xyz + distortion ).xyz;',\n\t\t\t\n\t\t\t// Smooth the normal following the distance\n\t\t\t'float distanceRatio = min( 1.0, log( 1.0 / length( vCamPosition - vWorldPosition ) * 3000.0 + 1.0 ) );',\n\t\t\t'distanceRatio *= distanceRatio;',\n\t\t\t'distanceRatio = distanceRatio * 0.7 + 0.3;',\n\t\t\t//'distanceRatio = 1.0;',\n\t\t\t'normal = ( distanceRatio * normal + vec3( 0.0, 1.0 - distanceRatio, 0.0 ) ) * 0.5;',\n\t\t\t'normal /= length( normal );',\n\t\t\t\n\t\t\t// Compute the fresnel ratio\n\t\t\t'float fresnel = pow( 1.0 - dot( normal, view ), 2.0 );',\n\t\t\t\n\t\t\t// Compute the sky reflection and the water color\n\t\t\t'float skyFactor = ( fresnel + 0.2 ) * 10.0;',\n\t\t\t'vec3 waterColor = ( 1.0 - fresnel ) * u_oceanColor;',\n\t\t\t\n\t\t\t// Compute the final color\n\t\t\t'vec3 color = ( skyFactor + specularFactor + waterColor ) * reflectionColor + waterColor * 0.5 ;',\n\t\t\t'color = hdr( color, u_exposure );',\n\n\t\t\t'gl_FragColor = vec4( color, 1.0 );',\n\t\t'}'\n\t].join('\\n')\n};"],"names":["THREE","ShaderLib","uniforms","UniformsLib","vertexShader","ShaderChunk","join","vertexShaderNoTexLookup","fragmentShader"],"version":3,"file":"index.09986741.js.map"}