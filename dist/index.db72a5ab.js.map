{"mappings":"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","sources":["js/loaders/MTLLoader.js"],"sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function( baseUrl, options, crossOrigin ) {\n\n\tthis.baseUrl = baseUrl;\n\tthis.options = options;\n\tthis.crossOrigin = crossOrigin;\n\n};\n\nTHREE.MTLLoader.prototype = {\n\n\tconstructor: THREE.MTLLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * Parses loaded MTL file\n\t * @param text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t */\n\tparse: function ( text ) {\n\n\t\tvar lines = text.split( \"\\n\" );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : \"\";\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === \"newmtl\" ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else if ( info ) {\n\n\t\t\t\tif ( key === \"ka\" || key === \"kd\" || key === \"ks\" ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[0] ), parseFloat( ss[1] ), parseFloat( ss[2] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.baseUrl, this.options );\n\t\tmaterialCreator.crossOrigin = this.crossOrigin\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n *                  invertTransparency: If transparency need to be inverted (inversion is needed if d = 0 is fully opaque)\n *                                      Default: false (d = 1 is fully opaque)\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl;\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tsetMaterials: function( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function( materialsInfo ) {\n\n\t\tif ( !this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 1 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'd':\n\n\t\t\t\t\t\t// According to MTL format (http://paulbourke.net/dataformats/mtl/):\n\t\t\t\t\t\t//   d is dissolve for current material\n\t\t\t\t\t\t//   factor of 1.0 is fully opaque, a factor of 0 is fully dissolved (completely transparent)\n\n\t\t\t\t\t\tif ( this.options && this.options.invertTransparency ) {\n\n\t\t\t\t\t\t\tvalue = 1 - value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function() {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams[ 'diffuse' ] = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ka':\n\n\t\t\t\t\t// Ambient color (color under shadow) using RGB values\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams[ 'specular' ] = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tparams[ 'map' ] = this.loadTexture( this.baseUrl + value );\n\t\t\t\t\tparams[ 'map' ].wrapS = this.wrap;\n\t\t\t\t\tparams[ 'map' ].wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams['shininess'] = value;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\n\t\t\t\t\t// According to MTL format (http://paulbourke.net/dataformats/mtl/):\n\t\t\t\t\t//   d is dissolve for current material\n\t\t\t\t\t//   factor of 1.0 is fully opaque, a factor of 0 is fully dissolved (completely transparent)\n\n\t\t\t\t\tif ( value < 1 ) {\n\n\t\t\t\t\t\tparams['transparent'] = true;\n\t\t\t\t\t\tparams['opacity'] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tif ( params[ 'bumpMap' ] ) break; // Avoid loading twice.\n\n\t\t\t\t\tparams[ 'bumpMap' ] = this.loadTexture( this.baseUrl + value );\n\t\t\t\t\tparams[ 'bumpMap' ].wrapS = this.wrap;\n\t\t\t\t\tparams[ 'bumpMap' ].wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( params[ 'diffuse' ] ) {\n\n\t\t\tparams[ 'color' ] = params[ 'diffuse' ];\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tvar texture;\n\t\tvar loader = THREE.Loader.Handlers.get( url );\n\n\t\tif ( loader !== null ) {\n\n\t\t\ttexture = loader.load( url, onLoad );\n\n\t\t} else {\n\n\t\t\ttexture = new THREE.Texture();\n\n\t\t\tloader = new THREE.ImageLoader();\n\t\t\tloader.crossOrigin = this.crossOrigin;\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = THREE.MTLLoader.ensurePowerOfTwo_( image );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n\nTHREE.MTLLoader.ensurePowerOfTwo_ = function ( image ) {\n\n\tif ( ! THREE.Math.isPowerOfTwo( image.width ) || ! THREE.Math.isPowerOfTwo( image.height ) ) {\n\n\t\tvar canvas = document.createElement( \"canvas\" );\n\t\tcanvas.width = THREE.MTLLoader.nextHighestPowerOfTwo_( image.width );\n\t\tcanvas.height = THREE.MTLLoader.nextHighestPowerOfTwo_( image.height );\n\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\treturn canvas;\n\n\t}\n\n\treturn image;\n\n};\n\nTHREE.MTLLoader.nextHighestPowerOfTwo_ = function( x ) {\n\n\t-- x;\n\n\tfor ( var i = 1; i < 32; i <<= 1 ) {\n\n\t\tx = x | x >> i;\n\n\t}\n\n\treturn x + 1;\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.MTLLoader.prototype );"],"names":[],"version":3,"file":"index.db72a5ab.js.map","sourceRoot":"/__parcel_source_root/"}