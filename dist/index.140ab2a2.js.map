{"mappings":"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","sources":["js/shaders/CloudShader2.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Cloud shader by @blurspline / http://github.com/zz85\n * Refactored by @jbouny\n */\n\nTHREE.ShaderLib['cloud'] = {\n\tuniforms: {\n\t\t'texture': { type: 't', value: null},\n\t\t'time': { type: 'f', value: 1 },\n\t\t'sharp': { type: 'f', value: 0.9 },\n\t\t'cover': { type: 'f', value: 0.5 },\n\t\t'clouds': { type: 'f', value: 1 },\n\t\t'depth': { type: 'f', value: 0 }\n\t},\n\tvertexShader: [\n\t\t'uniform sampler2D texture;',\n\t\t'uniform float time;',\n\t\t'varying vec2 vUv;',\n\t\t\n\t\t'void main()',\n\t\t'{',\n\t\t\t'vUv = uv;',\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\t\t'}'\n\t].join('\\n'),\n\tfragmentShader: [\n\t\t// Cloud shader by @blurspline / http://github.com/zz85\n\t\t// uses a simple fractal noise used a generated value-noise texture\n\n\t\t// references\n\t\t// 1. value noise\n\t\t// 2. iq clouds\n\t\t// 3. cloud papers\n\t\t'uniform float time;',\n\n\t\t'uniform float depth;',\n\t\t'uniform float sharp;', // magnify the intensity of clouds\n\t\t// 1 = dull ( more clouds), 0 = fuzzy ( less clouds)\n\t\t'uniform float cover;', // 0 = less clouds, 1 = more clouds\n\t\t\t\t\t\t\t// substraction factor\n\t\t'uniform float clouds;', // opacity\n\t\t'uniform sampler2D texture;',\n\t\t'varying vec2 vUv;',\n\n\t\t// multi-chanel noise lookup\n\t\t'vec3 noise3(vec2 p) {',\n\t\t'\treturn texture2D(texture, p).xyz;',\n\t\t'}',\n\n\t\t'vec3 fNoise(vec2 uv) {',\n\t\t'\tvec3 f = vec3(0.);',\n\t\t'\tfloat scale = 1.;',\n\t\t'\tfor (int i=0; i<5; i++) {',\n\t\t'\t\tscale *= 2.;',\n\t\t'\t\tf += noise3(uv * scale) / scale;',\n\t\t'\t}',\n\t\t'\treturn f;',\n\t\t'}',\n\n\t\t'void main(void)',\n\t\t'{',\n\t\t'\tvec2 uv = vUv;',\n\t\t\t\n\t\t\t// Formula: varience (smaller -> bigger cover) + speed (time) * direction\n\t\t\t// normal thick clouds\n\t\t'\tvec3 ff1 = fNoise(uv * 0.01 + time * 0.00015 * vec2(-1., 1.));',\n\n\t\t\t// fast small clouds\n\t\t'\tvec3 ff2 = fNoise(uv * 0.1 + time * 0.0005 * vec2(1., 1.));',\n\t\t\t\n\t\t\t// Different combinations of mixing\n\t\t'\tfloat t = ff1.x * 0.9 + ff1.y * 0.15;',\n\t\t'\tt = t * 0.99 + ff2.x * 0.01;',\n\n\t\t'\tfloat o = clamp ( length(uv * 2.0 - vec2(1., 1.)), 0., 1. );',\n\t\t\t\n\t\t\t// applies more transparency to horizon for \n\t\t\t// to create illusion of distant clouds\n\t\t'\to =  1. - o * o * o * o;',\n\n\t\t\t// multiply by more cloud transparency\n\t\t'\to -= (1. - t) * 0.95;', // factor clouds opacity based on cloud cover\n\t\t\t// 1 t = 1 o\n\t\t\t// depending on where this is placed, it will affect darkness / opacity of clouds\n\t\t'\tt = max(t - (1. - cover), 0.);', // low cut off point\n\t\t\t// magnify or add layers!\n\t\t\t// cloud power magnifer\n\t\t'\tt = 1. - pow(1. - sharp, t);', // . 0.999999 (response curve from linear to exponiential brigtness)\n\t\t'\tt = min(t * 1.9, 1.0);', // clamp to 1.0\n\n\t\t\t// Other effects\n\n\t\t'\tif (depth > 0.) {',\n\t\t\t\t// tweak thresholds\n\t\t'\t\tif (o < 0.4 && t < 0.8) discard;',\n\n\t\t'\t\tgl_FragData[ 0 ] = vec4(gl_FragCoord.z, 1., 1., 1.);',\n\t\t'\t}',\n\t\t'\telse {',\n\t\t'\t\tgl_FragData[ 0 ] = vec4(t, t, t, o );',\n\n\t\t'\t}',\t\t\t\n\t\t'}'\n\t].join('\\n')\n};\n\nfunction CloudShader( renderer, noiseSize ) {\n\n\tnoiseSize = noiseSize || 256;\n\t\n\tvar cloudShader = THREE.ShaderLib['cloud'] ;\n\n\t// Generate random noise texture\n\tvar size = noiseSize * noiseSize;\n\tvar data = new Uint8Array( 4 * size );\n\n\tfor ( var i = 0; i < size * 4; i ++ ) {\n\t\tdata[ i ] = Math.random() * 255 | 0;\n\t}\n\n\tvar dt = new THREE.DataTexture( data, noiseSize, noiseSize, THREE.RGBAFormat );\n\tdt.wrapS = THREE.RepeatWrapping;\n\tdt.wrapT = THREE.RepeatWrapping;\n\tdt.magFilter = THREE.LinearFilter;\n\tdt.minFilter = THREE.LinearFilter;\n\tdt.needsUpdate = true;\n\t\n\tcloudShader.uniforms.texture.value = dt;\n\n\tvar noiseMaterial = new THREE.ShaderMaterial({\n\t\tvertexShader: cloudShader.vertexShader,\n\t\tfragmentShader: cloudShader.fragmentShader,\n\t\tuniforms: cloudShader.uniforms,\n\t\tside: THREE.DoubleSide,\n\t\ttransparent: true\n\t});\n\n\tthis.noiseMaterial = noiseMaterial;\n\n\tvar scamera, sscene, smesh;\n\n\tscamera = new THREE.Camera();\n\n\tscamera.position.z = 1;\n\n\tsscene = new THREE.Scene();\n\n\tsmesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), noiseMaterial );\n\n\tsscene.add(smesh);\n\n\tfunction SkyDome(i, j) {\n\t\ti -= 0.5;\n\t\tj -= 0.5;\n\n\t\tvar r2 = i * i * 4 + j * j * 4;\n\t\tvar scale = 100000;\n\n\t\treturn new THREE.Vector3(\n\t\t\ti * 20 * scale,\n\t\t\t(1 - r2) * 5 * scale,\n\t\t\tj * 20 * scale\n\t\t).multiplyScalar(0.05);\n\n\t};\n\n\tthis.cloudMesh = new THREE.Mesh( \n\t\tnew THREE.ParametricGeometry(SkyDome, 5, 5),\n\t\tnoiseMaterial\n\t);\n\n\tvar performance = window.performance || Date;\n\n\tfunction update() {\n\t\tnoiseMaterial.uniforms.time.value = performance.now() / 1000;\n\t}\n\tthis.update = update;\n\n\tthis.depthOnly = function(v) {\n\t\tnoiseMaterial.uniforms.depth.value = v ? 1 : 0;\n\t};\n\n}\n"],"names":[],"version":3,"file":"index.140ab2a2.js.map","sourceRoot":"/__parcel_source_root/"}