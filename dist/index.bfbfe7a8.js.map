{"mappings":"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","sources":["js/effects/Ocean.js"],"sourcesContent":["﻿/**\n * @author jbouny / https://github.com/fft-ocean\n *\n * Based on:\n * @author Aleksandr Albert / http://www.routter.co.tt\n */\n\nTHREE.Ocean = function (renderer, camera, scene, options) {\n\n\t// flag used to trigger parameter changes\n\tthis.changed = true;\n\tthis.initial = true;\n\t\n\t// Assign required parameters as object properties\n\tthis.oceanCamera = new THREE.OrthographicCamera(); //camera.clone();\n\tthis.oceanCamera.position.z = 1;\n\tthis.renderer = renderer;\n\tthis.renderer.clearColor( 0xffffff );\n\t\n\tthis.scene = new THREE.Scene();\n\t\n\t// Enable necessary extensions\n\tthis.renderer.context.getExtension('OES_texture_float');\n\tthis.renderer.context.getExtension('OES_texture_float_linear');\n\t\n\t// Create mirror rendering\n\tthis.mirror = new THREE.MirrorRenderer( renderer, camera, scene ) ;\n\tthis.mirror.position.y = -10.0;\n\t\n\t// Assign optional parameters as variables and object properties\n\tfunction optionalParameter(value, defaultValue) {\n\t\treturn value !== undefined ? value : defaultValue;\n\t};\n\tfunction optionalParameterArray(value, index, defaultValue) {\n\t\treturn value !== undefined ? value[index] : defaultValue;\n\t};\n\toptions = options || {};\n\tthis.sunDirection = optionalParameter(options.SUN_DIRECTION, new THREE.Vector3(-1.0, 1.0, 1.0 ));\n\tthis.oceanColor = optionalParameter(options.OCEAN_COLOR, new THREE.Vector3(0.004, 0.016, 0.047));\n\tthis.skyColor = optionalParameter(options.SKY_COLOR, new THREE.Vector3(3.2, 9.6, 12.8));\n\tthis.exposure = optionalParameter(options.EXPOSURE, 0.35);\n\tthis.geometryResolution = optionalParameter(options.GEOMETRY_RESOLUTION, 32);\n\tthis.geometrySize = optionalParameter(options.GEOMETRY_SIZE, 2000);\n\tthis.resolution = optionalParameter(options.RESOLUTION, 64);\n\tthis.floatSize = optionalParameter(options.SIZE_OF_FLOAT, 4);\n\tthis.windX = optionalParameterArray(options.INITIAL_WIND, 0, 10.0),\n\tthis.windY = optionalParameterArray(options.INITIAL_WIND, 1, 10.0),\n\tthis.size = optionalParameter(options.INITIAL_SIZE, 250.0),\n\tthis.choppiness = optionalParameter(options.INITIAL_CHOPPINESS, 1.5);\n\t\n\tthis.matrixNeedsUpdate = false;\n\t\n\t// Setup framebuffer pipeline\n\tvar BaseParams = {\n\t\tformat: THREE.RGBAFormat,\n\t\tstencilBuffer: false,\n\t\tdepthBuffer: false,\n\t\tpremultiplyAlpha: false,\n\t\ttype: THREE.FloatType\n\t};\n\tvar LinearClampParams = JSON.parse(JSON.stringify(BaseParams));\n\tLinearClampParams.minFilter = LinearClampParams.magFilter = THREE.LinearFilter ;\n\tLinearClampParams.wrapS = LinearClampParams.wrapT = THREE.ClampToEdgeWrapping ;\n\t\n\tvar NearestClampParams = JSON.parse(JSON.stringify(BaseParams));\n\tNearestClampParams.minFilter = NearestClampParams.magFilter = THREE.NearestFilter ;\n\tNearestClampParams.wrapS = NearestClampParams.wrapT = THREE.ClampToEdgeWrapping ;\n\t\n\tvar NearestRepeatParams = JSON.parse(JSON.stringify(BaseParams));\n\tNearestRepeatParams.minFilter = NearestRepeatParams.magFilter = THREE.NearestFilter ;\n\tNearestRepeatParams.wrapS = NearestRepeatParams.wrapT = THREE.RepeatWrapping ;\n\t\n\tvar LinearRepeatParams = JSON.parse(JSON.stringify(BaseParams));\n\tLinearRepeatParams.minFilter = LinearRepeatParams.magFilter = THREE.LinearFilter ;\n\tLinearRepeatParams.wrapS = LinearRepeatParams.wrapT = THREE.RepeatWrapping ;\n\t\n\tthis.initialSpectrumFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestRepeatParams);\n\tthis.spectrumFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n\tthis.pingPhaseFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n\tthis.pongPhaseFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n\tthis.pingTransformFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n\tthis.pongTransformFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n\tthis.displacementMapFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, LinearRepeatParams);\n\tthis.normalMapFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, LinearRepeatParams);\n\t\n\t// Define shaders and constant uniforms\n\t////////////////////////////////////////\n\t\n\t// 0 - The vertex shader used in all of the simulation steps\n\tvar fullscreeenVertexShader = THREE.ShaderLib[\"ocean_sim_vertex\"];\n\t\t\n\t// 1 - Horizontal wave vertices used for FFT\n\tvar oceanHorizontalShader = THREE.ShaderLib[\"ocean_subtransform\"];\n\tvar oceanHorizontalUniforms = THREE.UniformsUtils.clone(oceanHorizontalShader.uniforms);\n\tthis.materialOceanHorizontal = new THREE.ShaderMaterial({\n\t\tuniforms: oceanHorizontalUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: \"#define HORIZONTAL \\n\" + oceanHorizontalShader.fragmentShader\n\t});\n\tthis.materialOceanHorizontal.uniforms.u_transformSize = { type: \"f\", value: this.resolution };\n\tthis.materialOceanHorizontal.uniforms.u_subtransformSize = { type: \"f\", value: null };\n\tthis.materialOceanHorizontal.uniforms.u_input = { type: \"t\", value: null };\n\tthis.materialOceanHorizontal.depthTest = false;\n\t\n\t// 2 - Vertical wave vertices used for FFT\n\tvar oceanVerticalShader = THREE.ShaderLib[\"ocean_subtransform\"];\n\tvar oceanVerticalUniforms = THREE.UniformsUtils.clone(oceanVerticalShader.uniforms);\n\tthis.materialOceanVertical = new THREE.ShaderMaterial({\n\t\tuniforms: oceanVerticalUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: oceanVerticalShader.fragmentShader\n\t});\n\tthis.materialOceanVertical.uniforms.u_transformSize = { type: \"f\", value: this.resolution };\n\tthis.materialOceanVertical.uniforms.u_subtransformSize = { type: \"f\", value: null };\n\tthis.materialOceanVertical.uniforms.u_input = { type: \"t\", value: null };\n\tthis.materialOceanVertical.depthTest = false;\n\t\n\t// 3 - Initial spectrum used to generate height map\n\tvar initialSpectrumShader = THREE.ShaderLib[\"ocean_initial_spectrum\"];\n\tvar initialSpectrumUniforms = THREE.UniformsUtils.clone(initialSpectrumShader.uniforms);\n\tthis.materialInitialSpectrum = new THREE.ShaderMaterial({\n\t\tuniforms: initialSpectrumUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader:initialSpectrumShader.fragmentShader\n\t});\n\tthis.materialInitialSpectrum.uniforms.u_wind = { type: \"v2\", value: new THREE.Vector2() };\n\tthis.materialInitialSpectrum.uniforms.u_resolution = { type: \"f\", value: this.resolution };\n\tthis.materialInitialSpectrum.depthTest = false;\n\t\n\t// 4 - Phases used to animate heightmap\n\tvar phaseShader = THREE.ShaderLib[\"ocean_phase\"];\n\tvar phaseUniforms = THREE.UniformsUtils.clone(phaseShader.uniforms);\n\tthis.materialPhase = new THREE.ShaderMaterial({\n\t\tuniforms: phaseUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: phaseShader.fragmentShader\n\t});\n\tthis.materialPhase.uniforms.u_resolution = { type: \"f\", value: this.resolution };\n\tthis.materialPhase.depthTest = false;\n\t\n\t// 5 - Shader used to update spectrum\n\tvar spectrumShader = THREE.ShaderLib[\"ocean_spectrum\"];\n\tvar spectrumUniforms = THREE.UniformsUtils.clone(spectrumShader.uniforms);\n\tthis.materialSpectrum = new THREE.ShaderMaterial({\n\t\tuniforms: spectrumUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: spectrumShader.fragmentShader\n\t});\n\tthis.materialSpectrum.uniforms.u_initialSpectrum = { type: \"t\", value: null };\n\tthis.materialSpectrum.uniforms.u_resolution = { type: \"f\", value: this.resolution };\n\tthis.materialSpectrum.uniforms.u_choppiness.value = this.choppiness ;\n\tthis.materialSpectrum.depthTest = false;\n\n\t// 6 - Shader used to update spectrum normals\n\tvar normalShader = THREE.ShaderLib[\"ocean_normals\"];\n\tvar normalUniforms = THREE.UniformsUtils.clone(normalShader.uniforms);\n\tthis.materialNormal = new THREE.ShaderMaterial({\n\t\tuniforms: normalUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: normalShader.fragmentShader\n\t});\n\tthis.materialNormal.uniforms.u_displacementMap = { type: \"t\", value: null };\n\tthis.materialNormal.uniforms.u_resolution = { type: \"f\", value: this.resolution };\n\tthis.materialNormal.depthTest = false;\n\n\t// 7 - Shader used to update normals\n\tvar oceanShader = THREE.ShaderLib[\"ocean_main\"];\n\tvar oceanUniforms = THREE.UniformsUtils.clone(oceanShader.uniforms);\n\tvar vertexShaderOcean = oceanShader.vertexShader;\n\t{\n\t\tvar gl = renderer.getContext();\n\t\tif ( gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) === 0 ) {\n\t\t\tvertexShaderOcean = oceanShader.vertexShaderNoTexLookup;\n\t\t}\n\t}\n\tthis.materialOcean = new THREE.ShaderMaterial({\n\t\tuniforms: oceanUniforms,\n\t\tvertexShader: vertexShaderOcean,\n\t\tfragmentShader: oceanShader.fragmentShader,\n\t\tside: THREE.FrontSide,\n\t\twireframe: false\n\t});\n\t//this.materialOcean.wireframe = true;\n\tthis.materialOcean.uniforms.u_geometrySize = { type: \"f\", value: this.resolution };\n\tthis.materialOcean.uniforms.u_displacementMap = { type: \"t\", value: this.displacementMapFramebuffer };\n\tthis.materialOcean.uniforms.u_reflection = { type: \"t\", value: this.mirror.texture };\n\tthis.materialOcean.uniforms.u_mirrorMatrix = { type: \"m4\", value: this.mirror.textureMatrix };\n\tthis.materialOcean.uniforms.u_normalMap = { type: \"t\", value: this.normalMapFramebuffer }; \n\tthis.materialOcean.uniforms.u_oceanColor = { type: \"v3\", value: this.oceanColor }; \n\tthis.materialOcean.uniforms.u_skyColor = { type: \"v3\", value: this.skyColor };\n\tthis.materialOcean.uniforms.u_sunDirection = { type: \"v3\", value: this.sunDirection };\n\tthis.materialOcean.uniforms.u_exposure = { type: \"f\", value: this.exposure };\n\n\t// Disable blending to prevent default premultiplied alpha values\n\tthis.materialOceanHorizontal.blending = 0;\n\tthis.materialOceanVertical.blending = 0;\n\tthis.materialInitialSpectrum.blending = 0;\n\tthis.materialPhase.blending = 0;\n\tthis.materialSpectrum.blending = 0;\n\tthis.materialNormal.blending = 0;\n\tthis.materialOcean.blending = 0;\n\n\t// Create the simulation plane\n\tthis.screenQuad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ) );\n\tthis.scene.add(this.screenQuad);\n\n\t// Initialise spectrum data\n\tthis.generateSeedPhaseTexture();\n\n\t// Generate the ocean mesh\n\tthis.generateMesh();\n\tthis.mirror.mesh = this.oceanMesh;\n\tcamera.add( this.oceanMesh );\n\t\n};\n\nTHREE.Ocean.prototype.generateMesh = function () {\n\n\tvar geometry = new THREE.PlaneBufferGeometry( 1, 1, this.geometryResolution, this.geometryResolution );\n\tthis.oceanMesh = new THREE.Mesh( geometry, this.materialOcean );\n\t\n};\n\nTHREE.Ocean.prototype.update = function () {\n\n\tthis.overrideMaterial = this.materialOcean;\n\tif ( this.changed ) {\n\t\tthis.materialOcean.uniforms.u_size.value = this.size;\n\t\tthis.materialOcean.uniforms.u_exposure.value = this.exposure;\n\t\tthis.changed = false;\n\t}\n\tthis.materialOcean.uniforms.u_normalMap.value = this.normalMapFramebuffer ;\n\tthis.materialOcean.uniforms.u_displacementMap.value = this.displacementMapFramebuffer ;\n\tthis.materialOcean.depthTest = true;\n\t\n};\n\nTHREE.Ocean.prototype.render = function () {\n\n\tthis.scene.overrideMaterial = null;\n\t\n\tif (this.changed)\n\t\tthis.renderInitialSpectrum();\n\t\n\tthis.mirror.render();\n\tthis.renderWavePhase();\n\tthis.renderSpectrum();\n\tthis.renderSpectrumFFT();\n\tthis.renderNormalMap();\n\tthis.scene.overrideMaterial = null;\n\t\n};\n\nTHREE.Ocean.prototype.generateSeedPhaseTexture = function() {\n\n\t// Setup the seed texture\n\tthis.pingPhase = true;\n\tvar phaseArray = new window.Float32Array(this.resolution * this.resolution * 4);\n\tfor (var i = 0; i < this.resolution; i++) {\n\t\tfor (var j = 0; j < this.resolution; j++) {\n\t\t\tphaseArray[i * this.resolution * 4 + j * 4] = Math.random() * 2.0 * Math.PI;\n\t\t\tphaseArray[i * this.resolution * 4 + j * 4 + 1] = 0.0;\n\t\t\tphaseArray[i * this.resolution * 4 + j * 4 + 2] = 0.0;\n\t\t\tphaseArray[i * this.resolution * 4 + j * 4 + 3] = 0.0;\n\t\t}\n\t}\n\t\n\tthis.pingPhaseTexture = new THREE.DataTexture(phaseArray, this.resolution, this.resolution, THREE.RGBAFormat);\n\tthis.pingPhaseTexture.minFilter = THREE.NearestFilter;\n\tthis.pingPhaseTexture.magFilter = THREE.NearestFilter;\n\tthis.pingPhaseTexture.wrapS = THREE.ClampToEdgeWrapping;\n\tthis.pingPhaseTexture.wrapT = THREE.ClampToEdgeWrapping;\n\tthis.pingPhaseTexture.type = THREE.FloatType;\n\tthis.pingPhaseTexture.needsUpdate = true;\n\t\n};\n\nTHREE.Ocean.prototype.renderInitialSpectrum = function () {\n\n\tthis.scene.overrideMaterial = this.materialInitialSpectrum;\n\tthis.materialInitialSpectrum.uniforms.u_wind.value.set( this.windX, this.windY );\n\tthis.materialInitialSpectrum.uniforms.u_size.value = this.size;\n\tthis.renderer.render(this.scene, this.oceanCamera, this.initialSpectrumFramebuffer, true);\n\t\n};\n\nTHREE.Ocean.prototype.renderWavePhase = function () {\n\n\tthis.scene.overrideMaterial = this.materialPhase;\n\tthis.screenQuad.material = this.materialPhase;\n\tif (this.initial) {\n\t\tthis.materialPhase.uniforms.u_phases.value = this.pingPhaseTexture;\n\t\tthis.initial = false;\n\t}else {\n\t\tthis.materialPhase.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer\t: this.pongPhaseFramebuffer;\n\t}\n\tthis.materialPhase.uniforms.u_deltaTime.value = this.deltaTime;\n\tthis.materialPhase.uniforms.u_size.value = this.size;\n\tthis.renderer.render(this.scene, this.oceanCamera, this.pingPhase ? this.pongPhaseFramebuffer : this.pingPhaseFramebuffer);\n\tthis.pingPhase = !this.pingPhase;\n\t\n};\n\nTHREE.Ocean.prototype.renderSpectrum = function () {\n\n\tthis.scene.overrideMaterial = this.materialSpectrum;\n\tthis.materialSpectrum.uniforms.u_initialSpectrum.value = this.initialSpectrumFramebuffer;\n\tthis.materialSpectrum.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer : this.pongPhaseFramebuffer;\n\t//this.materialSpectrum.uniforms.u_choppiness.value = this.choppiness ;\n\tthis.materialSpectrum.uniforms.u_size.value = this.size ;\n\tthis.renderer.render(this.scene, this.oceanCamera, this.spectrumFramebuffer);\n\t\n};\n\nTHREE.Ocean.prototype.renderSpectrumFFT = function() {\n\n\t// GPU FFT using Stockham formulation\n\tvar iterations = Math.log2( this.resolution ) * 2; // log2\n\t\n\tthis.scene.overrideMaterial = this.materialOceanHorizontal;\n\tvar subtransformProgram = this.materialOceanHorizontal;\n\t\n\t// Processus 0-N\n\t// material = materialOceanHorizontal\n\t// 0 : material( spectrumFramebuffer ) > pingTransformFramebuffer\n\t\n\t// i%2==0 : material( pongTransformFramebuffer ) > pingTransformFramebuffer\n\t// i%2==1 : material( pingTransformFramebuffer ) > pongTransformFramebuffer\n\t\n\t// i == N/2 : material = materialOceanVertical\n\t\n\t// i%2==0 : material( pongTransformFramebuffer ) > pingTransformFramebuffer\n\t// i%2==1 : material( pingTransformFramebuffer ) > pongTransformFramebuffer\n\t\n\t// N-1 : materialOceanVertical( pingTransformFramebuffer / pongTransformFramebuffer ) > displacementMapFramebuffer\n\t\n\tvar frameBuffer;\n\tvar inputBuffer;\n\t\n\tfor (var i = 0; i < iterations; i++) {\n\t\tif (i === 0) {\n\t\t\tinputBuffer = this.spectrumFramebuffer;\n\t\t\tframeBuffer = this.pingTransformFramebuffer ;\n\t\t} \n\t\telse if (i === iterations - 1) {\n\t\t\tinputBuffer = ((iterations % 2 === 0)? this.pingTransformFramebuffer : this.pongTransformFramebuffer) ;\n\t\t\tframeBuffer = this.displacementMapFramebuffer ;\n\t\t}\n\t\telse if (i % 2 === 1) {\n\t\t\tinputBuffer = this.pingTransformFramebuffer;\n\t\t\tframeBuffer = this.pongTransformFramebuffer ;\n\t\t}\n\t\telse {\n\t\t\tinputBuffer = this.pongTransformFramebuffer;\n\t\t\tframeBuffer = this.pingTransformFramebuffer ;\n\t\t}\n\t\t\n\t\tif (i === iterations / 2) {\n\t\t\tsubtransformProgram = this.materialOceanVertical;\n\t\t\tthis.scene.overrideMaterial = this.materialOceanVertical;\n\t\t}\n\t\t\n\t\tsubtransformProgram.uniforms.u_input.value = inputBuffer;\n\t\t\n\t\tsubtransformProgram.uniforms.u_subtransformSize.value = Math.pow(2, (i % (iterations / 2) + 1 ));\n\t\tthis.renderer.render(this.scene, this.oceanCamera, frameBuffer);\n\t}\n\t\n};\n\nTHREE.Ocean.prototype.renderNormalMap = function () {\n\n\tthis.scene.overrideMaterial = this.materialNormal;\n\tif (this.changed) this.materialNormal.uniforms.u_size.value = this.size;\n\tthis.materialNormal.uniforms.u_displacementMap.value = this.displacementMapFramebuffer;\n\tthis.renderer.render(this.scene, this.oceanCamera, this.normalMapFramebuffer, true);\n\t\n};\n"],"names":[],"version":3,"file":"index.bfbfe7a8.js.map","sourceRoot":"/__parcel_source_root/"}